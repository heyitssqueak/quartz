{"/":{"title":"emilyyao.me","content":"\n# hey, it's squeak!\nWelcome to my pothole of the internet. I'm Emily! My nickname is \"*squeak*\" ‚Äî from which most of my usernames on the web are derived. I'm currently a first-year at UW-Madison interested in *robotics, machine learning, and internet privacy*. In my free time, I love reading historical fiction and listening to [copyrighted Nintendo music](https://youtu.be/HL9_xm5HwrE).\n\nIf you're looking for my notes, check out [wiki.emilyyao.me](https://wiki.emilyyao.me/)!\n\n# relevant\n- Check out my growing portfolio on [GitHub](https://github.com/heyitssqueak).\n- ~~Get ignored by~~ Add me on [LinkedIn](https://www.linkedin.com/in/emilyyao04/).\n- Say hello! `eyao#0712` / `@squeakers:matrix.org` / `hello [at] emilyyao.me`\n\n# recent\nCheck out the [stream](/stream.md)!\n\u003c!-- - üå∞ 22-06-21 `::` [honk honk](/2022-sea2.md) honk --\u003e\n- üåø 22-06-22 `::` [notes](/notes/cs220.md) from CS 220\n- ü•≠ 22-06-11 `::` [the beginning](/2022-sea1.md) of my summer learning quest\n\n\u003c!-- Here are some notable links for you to guide your way:\n- [Anything and everything](/stream) I write about, seperated into [academics](/academics), [worldbuilding](https://dream.emilyyao.me), and [blog posts](/writing)\n\n- The [Portfolio](/portfolio) and the [Anti-Portfolio](/anti-portfolio) --\u003e\n\n\u003c!-- - My ongoing [[projects]]! --\u003e\n\n\u003c!-- I enjoy meeting as many people as I can! If you want to recommend me a book or ask about my website, send me a chat through [Element](https://element.io) at `@squeakers:matrix.org`. --\u003e\n\n\u003c!-- # recent  \nFor more information on the emojis (üå∞, üåø, ü•≠), check [this](/stream) out.\n- üåø 22-05-06 `::` [a few ramblings](/writing/slaughterhouse-five) about Kurt Vonnegut's *Slaughterhouse-Five* --\u003e\n\n\n\u003c!-- # WIP\n- set up worldbuilding @ dream.emilyyao.me\n- set up academic stuff @ wiki.emilyyao.me\n    - alter cactus theme to have graph\n    - test with lin alg notes\n- write a blog post about something ie make the website presentable with Content --\u003e","lastmodified":"2022-06-23T00:24:01.18089372Z","tags":null},"/2022-sea1":{"title":"Summer Exploration Arc #1","content":"## motivation\nI've always wanted to document my growth over a period of time to see what I can accomplish on my own. This summer is an ideal place to start -- just after high school and before college, where I have enough agency to achieve my goals, without too much academic stress. I'm drawing motivation from this saying: \n\n\u003e Most people overestimate what they can do in a day, but underestimate what they can do in a year.\n\nMy goals are the following:\n- Learn about topics that I think I would enjoy\n- Work on some small projects\n- Build healthy habits\n- Read more, write more\n- Enjoy that summer sun\n\nThey are vague on purpose -- I'll have plenty of options that accomplish these tasks without feeling restricted to a particular path.\n\n## starting point\n### online classes\nBefore the fall semester starts, I want to do a bit of learning on my own. For the most part, I'm going to be reviewing old classes (linear algebra, data structures / algorithms) and exploring new classes (discrete math, artificial intelligence, signals and systems). This is for me to \"test the waters\" and try out things that are interesting to me.\n\n### cool projects\nI'm interested in making something for 3Blue1Brown's [Summer of Math Exposition #2 (SoME2)](https://youtu.be/hZuYICAEN9Y). I'm not particularly sure what knowledge I have to offer but I'm planning on something within the computer science or signal processing realm. \n\nI've also been interested in cybersecurity for the past few months, but never got around to actually learning more about it. Since I have more time now, I want to take advantage of some resources like [HackTheBox](https://hackthebox.com), [OverTheWire: Wargames](https://overthewire.org/wargames/), the [DEF CON CTF archive](https://archive.ooo/) to help me learn more. At the beginning of this year, my goal was to participate in the DEF CON 30 CTF qualifiers, but that has since passed -- my new goal is to take a shot at next year's qualifiers, but we'll see about that...\n\nAmong other things, I want to clean up my website better and get my wiki space set up.\n\n## plan\nMy next update will be in two weeks. For the most part, I want to see where things will take me, so I don't really have a concrete schedule.","lastmodified":"2022-06-23T00:24:01.18089372Z","tags":null},"/notes/cs220":{"title":"CS 220: Data Programming I","content":"Self-paced course taken summer '22, linked [here](https://www.msyamkumar.com/cs220/s20/syllabus.html). Introductory data science programming using Python and focuses on analyzing data quickly and efficiently.\n\n## introduction\n- inputs: keyboard, mouse\n- outputs: monitor, speaker\n- devices attach to the computer via ‚Äúports‚Äù (USB)\n- motherboard: main circuit and connects to other components with sockets and slots\n- CPU, central processing unit\n    - runs code (receives input, sends output)\n    - runs on a clock, measured in Hz (ex. GHz is billions of ticks per second)\n    - high speed CPU ‚Üí hotter\n    - computers have multiple CPUs\n- RAM, random access memory\n    - short term data storage\n        - CPU sends to and from RAM\n    - ‚Äúvolatile‚Äù - lose data when computer is powered off\n    - one byte = one letter\n- storage drives\n    - HDD, hard disk drive\n        - inexpensive, moving parts, slow\n    - SSD, solid state drive\n        - expensive, no moving parts, fast\n    - stores data after computer shut down\n- network: an extension or built-in card to the motherboard\n    - NIC, network interface controller\n        - provides communication to other machines + internet\n    - wired = ethernet, wireless = wifi\n    - server: computer waits for incoming requests which it responds to\n    - client: program that sends requests to a server\n- jupyter notebook runs and displays results of py code without needing to run it yourself\n\n\n## the terminal\n\n- you can connect to terminals located anywhere, such as connecting to a remote computer OR connecting to a personal computer\n- shell helps navigate to program and run\n- helpful shell commands    \n    - `pwd` get working directory ‚Üí current location\n    - `man` opens manual pages for command\n    - `\u003ctab\u003e` autocomplete\n    - `\u003cctrl-C\u003e` kill / exit\n    - `\u003cup arrow\u003e` last used command\n    - `\u003cctrl-R\u003e` search used commands\n    - `cd` open directory\n        - `cd ..` go up a directory\n        - `cd /` go to top directory\n    - `ls` lists contents of current directory\n    - `mkdir` makes new directory\n    - `echo` repeat or copy\n    - `cat` display contents of file\n    - `mv [original] [destination]` move files\n    - `cp [original] [destination]` copy files        \n- pathname: the location of your file (windows: includes drive letter, filename, extension‚Ä¶)\n    - absolute: always possible (complete path name to file)\n    - relative: with respect to current location\n    - working directory: current location\n    - `..` navigates up a directory\n    - `.` navigates into a directory\n- arguments are inputs that come after the call of the program name\n- use `\u003e` to redirect output to a new file\n- use `\u003e\u003e` to add output to a file\n\n\n## programming\n\n- interpreter: a program that translates human-legible code into machine-legible code\n- editor: a program where you can write code\n- jupyter notebook mixes code with other things like images, tables, documentation, etc\n- ways to run python\n    - `python` interactive, denoted by `\u003e\u003e\u003e`\n    - `python [program name]` script\n    - `jupyter notebook` notebook\n- python uses order of operations to simplify equations (parentheses, exponents, m/d, a/s)\n    - negative and positive signs take precedence over m/d\n    - logic operators come after comparison operators which come after math operators\n\n![diagram](/images/operator-precedence.png)\n\n- boolean operators\n    - AND: true when both conditions are true (t/t), false otherwise (t/f, f/t, f/f)\n    - OR: true when one condition is true (t/t, t/f, f/t), false otherwise (f/f)\n    - NOT: true when the condition is false\n        - evaluate: NOT(is it saturday?)\n            - if (is it saturday?) is true, then the expression is false, i.e., it IS saturday\n            - if (is it saturday?) is false, then the expression is true, i.e., it is NOT saturday\n\n### ch1: the way of the program\n\n- python uses symbols as *bitwise* operators and words as logic operators\n    - `and` `or` are logic operators\n    - `\u0026` `|` are bitwise operators\n        - convert arguments into binary before comparisons\n- common types: int, float, string, boolean\n- parsing is understanding structure and meaning in a language\n    - formal language: specifically designed languages (like mathematical or molecular notation); means exactly what it says, unambiguous, less redundant/more concise\n    - natural language: naturally-evolved language (like English); has idioms/metaphor, needs redundancy to make up for ambiguity\n\n","lastmodified":"2022-06-23T00:24:01.18089372Z","tags":null},"/stream":{"title":"Stream","content":"This serves as a hub for all of my recent edits on my website. All of my writing is organized into three categories ‚Äî **seed** (üå∞) for quick thoughts, **leaf** (üåø) for revised ideas, and **fruit** (ü•≠) for completed blog posts.\n\n- üåø 22-06-22 `::` [NOTES - CS 220: Data Programming I](/notes/cs220.md)\n- ü•≠ 22-06-11 `::` [Summer Exploration Arc #1](/2022-sea1.md)","lastmodified":"2022-06-23T00:24:01.18089372Z","tags":null}}